//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServicioMultimedia
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioMultimedia.IFotoCuentaUsuario")]
    public interface IFotoCuentaUsuario
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFotoCuentaUsuario/RegistrarFotoCuentaUsuario", ReplyAction="http://tempuri.org/IFotoCuentaUsuario/RegistrarFotoCuentaUsuarioResponse")]
        System.Threading.Tasks.Task<int> RegistrarFotoCuentaUsuarioAsync(string imagenCuentaUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFotoCuentaUsuario/ObtenerFotoCuentaUsuario", ReplyAction="http://tempuri.org/IFotoCuentaUsuario/ObtenerFotoCuentaUsuarioResponse")]
        System.Threading.Tasks.Task<string> ObtenerFotoCuentaUsuarioAsync(int idFotoCuentaUsuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IFotoCuentaUsuarioChannel : ServicioMultimedia.IFotoCuentaUsuario, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class FotoCuentaUsuarioClient : System.ServiceModel.ClientBase<ServicioMultimedia.IFotoCuentaUsuario>, ServicioMultimedia.IFotoCuentaUsuario
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FotoCuentaUsuarioClient() : 
                base(FotoCuentaUsuarioClient.GetDefaultBinding(), FotoCuentaUsuarioClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFotoCuentaUsuario.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoCuentaUsuarioClient(EndpointConfiguration endpointConfiguration) : 
                base(FotoCuentaUsuarioClient.GetBindingForEndpoint(endpointConfiguration), FotoCuentaUsuarioClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoCuentaUsuarioClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FotoCuentaUsuarioClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoCuentaUsuarioClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FotoCuentaUsuarioClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoCuentaUsuarioClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> RegistrarFotoCuentaUsuarioAsync(string imagenCuentaUsuario)
        {
            return base.Channel.RegistrarFotoCuentaUsuarioAsync(imagenCuentaUsuario);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerFotoCuentaUsuarioAsync(int idFotoCuentaUsuario)
        {
            return base.Channel.ObtenerFotoCuentaUsuarioAsync(idFotoCuentaUsuario);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFotoCuentaUsuario))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFotoCuentaUsuario))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/ServicioMultimedia/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FotoCuentaUsuarioClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFotoCuentaUsuario);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FotoCuentaUsuarioClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFotoCuentaUsuario);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IFotoCuentaUsuario,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioMultimedia.IFotoEstado")]
    public interface IFotoEstado
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFotoEstado/RegistrarFotoDeEsatado", ReplyAction="http://tempuri.org/IFotoEstado/RegistrarFotoDeEsatadoResponse")]
        System.Threading.Tasks.Task<int> RegistrarFotoDeEsatadoAsync(string imagenCuentaUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFotoEstado/ObtenerFotoDeEstado", ReplyAction="http://tempuri.org/IFotoEstado/ObtenerFotoDeEstadoResponse")]
        System.Threading.Tasks.Task<string> ObtenerFotoDeEstadoAsync(int idFotoCuentaUsuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IFotoEstadoChannel : ServicioMultimedia.IFotoEstado, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class FotoEstadoClient : System.ServiceModel.ClientBase<ServicioMultimedia.IFotoEstado>, ServicioMultimedia.IFotoEstado
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FotoEstadoClient() : 
                base(FotoEstadoClient.GetDefaultBinding(), FotoEstadoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFotoEstado.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoEstadoClient(EndpointConfiguration endpointConfiguration) : 
                base(FotoEstadoClient.GetBindingForEndpoint(endpointConfiguration), FotoEstadoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoEstadoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FotoEstadoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoEstadoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FotoEstadoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FotoEstadoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> RegistrarFotoDeEsatadoAsync(string imagenCuentaUsuario)
        {
            return base.Channel.RegistrarFotoDeEsatadoAsync(imagenCuentaUsuario);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerFotoDeEstadoAsync(int idFotoCuentaUsuario)
        {
            return base.Channel.ObtenerFotoDeEstadoAsync(idFotoCuentaUsuario);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFotoEstado))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFotoEstado))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/ServicioMultimedia/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FotoEstadoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFotoEstado);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FotoEstadoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFotoEstado);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IFotoEstado,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioMultimedia.IAudioDeMensaje")]
    public interface IAudioDeMensaje
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioDeMensaje/RegistrarAudioDeMensaje", ReplyAction="http://tempuri.org/IAudioDeMensaje/RegistrarAudioDeMensajeResponse")]
        System.Threading.Tasks.Task<int> RegistrarAudioDeMensajeAsync(string audio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioDeMensaje/ObtenerAudioDeMensaje", ReplyAction="http://tempuri.org/IAudioDeMensaje/ObtenerAudioDeMensajeResponse")]
        System.Threading.Tasks.Task<string> ObtenerAudioDeMensajeAsync(int idMensajeAudio);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IAudioDeMensajeChannel : ServicioMultimedia.IAudioDeMensaje, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AudioDeMensajeClient : System.ServiceModel.ClientBase<ServicioMultimedia.IAudioDeMensaje>, ServicioMultimedia.IAudioDeMensaje
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AudioDeMensajeClient() : 
                base(AudioDeMensajeClient.GetDefaultBinding(), AudioDeMensajeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAudioDeMensaje.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioDeMensajeClient(EndpointConfiguration endpointConfiguration) : 
                base(AudioDeMensajeClient.GetBindingForEndpoint(endpointConfiguration), AudioDeMensajeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioDeMensajeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AudioDeMensajeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioDeMensajeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AudioDeMensajeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioDeMensajeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> RegistrarAudioDeMensajeAsync(string audio)
        {
            return base.Channel.RegistrarAudioDeMensajeAsync(audio);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerAudioDeMensajeAsync(int idMensajeAudio)
        {
            return base.Channel.ObtenerAudioDeMensajeAsync(idMensajeAudio);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAudioDeMensaje))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAudioDeMensaje))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/ServicioMultimedia/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AudioDeMensajeClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAudioDeMensaje);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AudioDeMensajeClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAudioDeMensaje);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAudioDeMensaje,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioMultimedia.IMensajeImagen")]
    public interface IMensajeImagen
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMensajeImagen/RegistrarFotoDeMensaje", ReplyAction="http://tempuri.org/IMensajeImagen/RegistrarFotoDeMensajeResponse")]
        System.Threading.Tasks.Task<int> RegistrarFotoDeMensajeAsync(string imagenMensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMensajeImagen/ObtenerFotoDeMensaje", ReplyAction="http://tempuri.org/IMensajeImagen/ObtenerFotoDeMensajeResponse")]
        System.Threading.Tasks.Task<string> ObtenerFotoDeMensajeAsync(int idMensajeImagen);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMensajeImagenChannel : ServicioMultimedia.IMensajeImagen, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MensajeImagenClient : System.ServiceModel.ClientBase<ServicioMultimedia.IMensajeImagen>, ServicioMultimedia.IMensajeImagen
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MensajeImagenClient() : 
                base(MensajeImagenClient.GetDefaultBinding(), MensajeImagenClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMensajeImagen.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MensajeImagenClient(EndpointConfiguration endpointConfiguration) : 
                base(MensajeImagenClient.GetBindingForEndpoint(endpointConfiguration), MensajeImagenClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MensajeImagenClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MensajeImagenClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MensajeImagenClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MensajeImagenClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MensajeImagenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> RegistrarFotoDeMensajeAsync(string imagenMensaje)
        {
            return base.Channel.RegistrarFotoDeMensajeAsync(imagenMensaje);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerFotoDeMensajeAsync(int idMensajeImagen)
        {
            return base.Channel.ObtenerFotoDeMensajeAsync(idMensajeImagen);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMensajeImagen))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMensajeImagen))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/ServicioMultimedia/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MensajeImagenClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMensajeImagen);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MensajeImagenClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMensajeImagen);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMensajeImagen,
        }
    }
}
